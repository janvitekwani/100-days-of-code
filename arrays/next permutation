1 approach
    1) by using the recusion find all the permuatation
    2) then search for the given recursion and then send the next recursion
    3) if their is not next permutation then return the previous 

it has time complexity n!*n beacuse making all the permutation will take n! time


2 approach in
 c++ there is a stl in build permuatation finding function  , not in java

3 approach 

class Solution {
    public void nextPermutation(int[] nums) {

     /*
         their are four steps
         1) find the peak element which is smaller than the 
             so we will see from last
         2) now find the element bigger than peak element and
            smaller than all other elements
         3) now swap the peak element and min search element
         4) and then sort the remain part

         and in this take care of the case when we are at last permutation
         and we have to reverse the complete array

         */       

        int temp=0; int peak=nums[0], index=-1;
        for(int i=nums.length-1;i>0;i--)
        {
            if(nums[i]>nums[i-1])
            {
                peak = nums[i-1];
                index=i-1;
                break;
            }
            
     }


        int min=Integer.MAX_VALUE, minindex=-1;

     
         for(int i=index+1;i<nums.length;i++)
         {

            if(i==0)
            {
                break;
            }
            if(peak<nums[i])
            {
                if(min>nums[i])
                  min=nums[i];
                  minindex = i;
                     
            }
         }
       if(index!=-1)
       {
        temp = nums[index];
        nums[index]=nums[minindex];
        nums[minindex]=temp; 
       }  

      if(index==-1)
      {
        for(int i=0;i<nums.length/2;i++)
        {
             temp=nums[i];
            nums[i]=nums[nums.length-i-1];
            nums[nums.length-i-1]=temp;
        }

      }
      else
       {Arrays.sort(nums,index+1,nums.length); }
      
         

      

    }
}
